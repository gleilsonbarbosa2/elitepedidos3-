import React, { useState, useEffect } from 'react';
import { MessageCircle, X, Minus, Send, Bot, User } from 'lucide-react';
import { findIntent, getInitialGreeting } from './intents';
import { saveUnknownQuery, shouldSaveAsUnknown, addTagToQuery } from './unknowns';
import { useOrders } from '../../hooks/useOrders';
import { usePDVCashRegister } from '../../hooks/usePDVCashRegister';
import { products } from '../../data/products';
import PromotionsAIResponse from './PromotionsAIResponse';

// Define message interface
interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

// Define order state interface
interface OrderState {
  stage: 'initial' | 'delivery_info' | 'product_selection' | 'add_more' | 'complements' | 'payment' | 'confirmation' | 'complete';
  deliveryType?: 'delivery' | 'pickup';
  customerName?: string;
  customerPhone?: string;
  customerAddress?: string;
  selectedProducts: Array<{
    name: string;
    price: number;
    size?: string;
    quantity: number;
    complements?: string[];
  }>;
  paymentMethod?: 'money' | 'pix' | 'card';
  total: number;
  selectedComplements?: string[];
}

const AcaiChatbot: React.FC = () => {
  const { createOrder } = useOrders();
  const { isOpen: isCashRegisterOpen } = usePDVCashRegister();
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [customerPhone, setCustomerPhone] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [messagesCount, setMessagesCount] = useState<number>(0);
  const [orderState, setOrderState] = useState<OrderState>({
    stage: 'initial',
    selectedProducts: [],
    total: 0,
    selectedComplements: []
  });
  const [currentProduct, setCurrentProduct] = useState<{
    name: string;
    price: number;
    size?: string;
  } | null>(null);
  const [showPromotions, setShowPromotions] = useState(false);
  const messagesEndRef = React.useRef<HTMLDivElement>(null);

  // Function to create an actual order in the system
  const createRealOrder = async () => {
    if (!isCashRegisterOpen) {
      return "Desculpe, n√£o foi poss√≠vel criar seu pedido porque o caixa est√° fechado. Por favor, tente novamente mais tarde ou entre em contato pelo WhatsApp.";
    }
    
    try {
      // Get the size from the product name
      const size = orderState.selectedProducts.find(p => p.name.includes('A√ßa√≠'))?.size || '';
      
      // Get selected complements from the order state
      const selectedComplements = orderState.selectedComplements || [];
      
      // Determine the number of cremes and mix based on size from delivery system
      let numCremes = 2;
      // Adjust max mix based on size from delivery system
      let numMix = 3;
      
      if (size.includes('700g') || size.includes('800g') || size.includes('900g') || size.includes('1kg') || size.includes('1 kg')) {
        numMix = 5;
      }
      // Add this information to the product name
      const enhancedProducts = orderState.selectedProducts.map(product => {
        if (product.name.includes('A√ßa√≠')) {
          return {
            ...product,
            name: `${product.name} (${numCremes} Cremes + ${numMix} Mix)`
          };
        }
        return product;
      });
      
      // Map selected products to order items format
      const items = enhancedProducts.map(product => ({
        id: `item-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        product_name: product.name,
        product_image: "https://images.pexels.com/photos/1092730/pexels-photo-1092730.jpeg?auto=compress&cs=tinysrgb&w=400",
        quantity: product.quantity,
        unit_price: product.price,
        total_price: product.price * product.quantity,
        observations: "Pedido feito pelo chatbot",
        complements: product.complements?.map(comp => ({
          name: comp,
          price: 0
        })) || []
      }));
      
      // Create order data
      const orderData = {
        customer_name: orderState.customerName || "Cliente do Chat",
        customer_phone: orderState.customerPhone || customerPhone || "00000000000",
        customer_address: orderState.customerAddress || "Endere√ßo n√£o informado",
        customer_neighborhood: "Centro", // Default neighborhood
        payment_method: orderState.paymentMethod || "money",
        items,
        total_price: orderState.total,
        status: 'pending' as const,
        channel: 'chatbot' as const
      };
      
      // Create the order
      const newOrder = await createOrder(orderData);
      
      return `üéâ Pedido criado com sucesso! Seu n√∫mero de pedido √© #${newOrder.id.slice(-8)}.\n\nEm breve voc√™ receber√° uma confirma√ß√£o pelo WhatsApp. Qualquer d√∫vida estou √† disposi√ß√£o! üíú`;
    } catch (error) {
      console.error('Erro ao criar pedido:', error);
      return "Desculpe, ocorreu um erro ao criar seu pedido. Por favor, tente novamente ou entre em contato pelo WhatsApp (85) 98904-1010.";
    }
  };
  // Load customer phone from localStorage
  useEffect(() => {
    const savedPhone = localStorage.getItem('customer_phone');
    if (savedPhone) {
      setCustomerPhone(savedPhone);
    }
  }, []);

  // Update messages count when messages change
  useEffect(() => {
    setMessagesCount(messages.length);
  }, [messages]);
  
  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Function to get welcome quick replies
  const getWelcomeQuickReplies = () => {
    return [
      { text: 'üõí Fazer um pedido', value: 'quero fazer um pedido' },
      { text: 'üìã Ver card√°pio', value: 'card√°pio' },
      { text: 'üî• Ver promo√ß√µes', value: 'promo√ß√µes' },
      { text: 'üìç Hor√°rios e localiza√ß√£o', value: 'hor√°rios' },
      { text: 'üí∞ Cashback', value: 'cashback' }
    ];
  };

  // Improved response generation function
  const generateResponse = (userMessage: string): string => {
    const normalizedMessage = userMessage.toLowerCase().trim();
    
    // Check for product categories
    if (orderState.stage === 'product_selection') {
      if (normalizedMessage.includes('a√ßa√≠') || normalizedMessage.includes('acai')) {
        return "Voc√™ escolheu A√ßa√≠! Temos v√°rios tamanhos:\n\n‚Ä¢ 300g - R$ 13,99\n‚Ä¢ 350g - R$ 15,99\n‚Ä¢ 400g - R$ 18,99\n‚Ä¢ 500g - R$ 22,99\n‚Ä¢ 600g - R$ 26,99\n‚Ä¢ 700g - R$ 31,99 (2 Cremes + 5 Mix)\n‚Ä¢ 800g - R$ 34,99 (2 Cremes + 5 Mix)\n‚Ä¢ 900g - R$ 38,99 (2 Cremes + 5 Mix)\n‚Ä¢ 1kg - R$ 44,99 (2 Cremes + 5 Mix)\n\nQual tamanho voc√™ prefere?";
      } else if (normalizedMessage.includes('combo')) {
        return "Voc√™ escolheu Combos! Nossas op√ß√µes:\n\n‚Ä¢ Combo Casal (1kg + Milkshake) - R$ 49,99\n‚Ä¢ Combo 1 (400g) - R$ 23,99\n‚Ä¢ Combo 2 (500g) - R$ 26,99\n‚Ä¢ Combo 3 (600g) - R$ 31,99\n‚Ä¢ Combo 4 (900g) - R$ 42,99\n\nQual combo voc√™ prefere?";
      } else if (normalizedMessage.includes('milk') || normalizedMessage.includes('shake')) {
        return "Voc√™ escolheu Milkshake! Temos:\n\n‚Ä¢ 400ml - R$ 11,99\n‚Ä¢ 500ml - R$ 12,99\n\nSabores dispon√≠veis: Morango, Chocolate, Baunilha, Ovomaltine\n\nQual tamanho e sabor voc√™ prefere?";
      } else if (normalizedMessage.includes('vitamina')) {
        return "Voc√™ escolheu Vitamina! Temos:\n\n‚Ä¢ Vitamina de A√ßa√≠ 400ml - R$ 12,00\n‚Ä¢ Vitamina de A√ßa√≠ 500ml - R$ 15,00\n\nOp√ß√µes de complementos: Amendoim, Castanha, Cereja, Farinha L√°ctea, Granola, Leite Condensado, Mel\n\nQual tamanho voc√™ prefere?";
      }
      
      // Check for size selection
      if (normalizedMessage.includes('300') || normalizedMessage.includes('400') || 
          normalizedMessage.includes('500') || normalizedMessage.includes('700')) {
        // User selected a size
        let size = '';
        let price = 0;
        
        if (normalizedMessage.includes('300')) { size = '300g'; price = 13.99; }
        else if (normalizedMessage.includes('350')) { size = '350g'; price = 15.99; }
        else if (normalizedMessage.includes('400')) { size = '400g'; price = 18.99; }
        else if (normalizedMessage.includes('500')) { size = '500g'; price = 22.99; }
        else if (normalizedMessage.includes('600')) { size = '600g'; price = 26.99; }
        else if (normalizedMessage.includes('700')) { size = '700g'; price = 31.99; }
        else if (normalizedMessage.includes('800')) { size = '800g'; price = 34.99; }
        else if (normalizedMessage.includes('900')) { size = '900g'; price = 38.99; }
        else if (normalizedMessage.includes('1kg') || normalizedMessage.includes('1 kg')) { size = '1kg'; price = 44.99; }
        
        // Store the current product
        setCurrentProduct({
          name: `A√ßa√≠ ${size}`,
          price: price,
          size: size
        });
        
        // Move to add more stage
        setOrderState({
          ...orderState,
          stage: 'add_more'
        });
        
        return `Voc√™ escolheu A√ßa√≠ ${size}. Deseja adicionar mais algum produto ao seu pedido?\n\n‚Ä¢ Digite "sim" para adicionar mais produtos\n‚Ä¢ Digite "continuar" para prosseguir com os complementos`;
      }
    }
    
    // Check for direct commands first
    if (normalizedMessage.includes("fazer um pedido") || normalizedMessage.includes("quero pedir")) {
      setOrderState({
        ...orderState,
        stage: 'delivery_info'
      });
      return "Vamos come√ßar seu pedido! Voc√™ deseja delivery ou retirada na loja?";
    }
    
    if (normalizedMessage.includes("acompanhar") && (normalizedMessage.includes("pedido") || normalizedMessage.includes("entrega"))) {
      return "Para acompanhar seu pedido, envie seu n√∫mero de telefone ou c√≥digo de pedido. üòä";
    }
    
    if (normalizedMessage.includes("card√°pio") || normalizedMessage.includes("cardapio") || normalizedMessage.includes("menu")) {
      return "Nosso card√°pio est√° dispon√≠vel aqui no site! üçß\n\nVoc√™ pode navegar pelas categorias como A√ßa√≠, Combos, Milkshakes, Vitaminas...\n\nQuer que eu te ajude a escolher algo espec√≠fico?";
    }
    
    if (normalizedMessage.includes("promo√ß√£o") || normalizedMessage.includes("promocao") || normalizedMessage.includes("desconto") || normalizedMessage.includes("oferta")) {
      window.setTimeout(() => setShowPromotions(true), 300);
      return "Aqui est√£o nossas promo√ß√µes do dia! üî•";
    }
    
    if (normalizedMessage.includes("hor√°rio") || normalizedMessage.includes("horario") || normalizedMessage.includes("localiza√ß√£o") || normalizedMessage.includes("localizacao") || normalizedMessage.includes("endere√ßo") || normalizedMessage.includes("endereco")) {
      return "Estamos abertos todos os dias das 14h √†s 22h! ‚è∞\n\nüìç Loja 1: Rua Dois, 2130-A ‚Äì Residencial 1 ‚Äì C√°gado\nüìç Loja 2: Rua Um, 1614-C ‚Äì Residencial 1 ‚Äì C√°gado";
    }

    const matchedIntent = findIntent(normalizedMessage);

    // Se estiver em um processo de pedido, usar fluxo de pedido
    if (orderState.stage !== 'initial' && orderState.stage !== 'complete') {
      return processOrderStage(userMessage);
    }

    // Se a intent for fallback (n√£o reconhecida)
    if (matchedIntent.id === 'fallback') {
      const context = messages.slice(-3).map(m => `${m.sender}: ${m.text}`).join('\n');
      saveUnknownQuery(userMessage, context);

      return "Essa informa√ß√£o ainda n√£o est√° dispon√≠vel, mas vou anotar para melhorar meu atendimento! üìù\n\nPosso te ajudar com informa√ß√µes sobre nosso card√°pio, promo√ß√µes, hor√°rios ou formas de pagamento. O que voc√™ gostaria de saber?";
    }

    // Caso a inten√ß√£o seja v√°lida, mas queira salvar para an√°lise futura (score baixo, opcional)
    const matchScore = matchedIntent.keywords?.reduce((acc, kw) => {
      return normalizedMessage.includes(kw) ? acc + kw.length : acc;
    }, 0) || 0;

    if (shouldSaveAsUnknown(userMessage, matchedIntent.id, matchScore, 0.15)) {
      const context = messages.slice(-3).map(m => `${m.sender}: ${m.text}`).join('\n');
      saveUnknownQuery(userMessage, context);
    }

    // A√ß√µes especiais por ID de intent
    switch (matchedIntent.id) {
      case 'promotions':
        window.setTimeout(() => setShowPromotions(true), 300);
        break;
      case 'new_order':
        setOrderState({
          ...orderState,
          stage: 'delivery_info'
        });
        return "Vamos iniciar seu pedido! üòä\n\nVoc√™ quer receber em casa (delivery) ou retirar em uma de nossas lojas?";
      default:
        break;
    }

    // Retorna a resposta da intent (texto ou fun√ß√£o)
    return typeof matchedIntent.response === 'function'
      ? matchedIntent.response()
      : matchedIntent.response;
  };
  
  // Process order based on current stage
  const processOrderStage = (userInput: string): string => {
    const input = userInput.toLowerCase().trim();
    
    // Helper function to check complement limits
    const checkComplementLimits = (type: string, items: string[], size?: string): string | null => {
      // Determine limits based on size
      let maxCremes = 2;
      let maxMix = 3;
      
      if (size && (size.includes('700g') || size.includes('800g') || size.includes('900g') || size.includes('1kg') || size.includes('1 kg'))) {
        maxMix = 5;
      }
      
      // Check if exceeding limits
      if (type === 'creme' && items.length > maxCremes) {
        return `‚ö†Ô∏è Voc√™ selecionou ${items.length} cremes, mas o limite para este tamanho √© ${maxCremes}. Por favor, selecione no m√°ximo ${maxCremes} cremes.`;
      }
      
      return null;
    };
    
    switch (orderState.stage) {
      case 'delivery_info':
        // Determine delivery type
        if (input.includes('casa') || input.includes('delivery') || input.includes('entreg')) {
          setOrderState({
            ...orderState,
            deliveryType: 'delivery',
            stage: 'delivery_info'
          });
          
          return "Beleza! Me informe:\n\nüìç Endere√ßo de entrega:\nüë§ Nome:\nüìû Telefone:";
        } else if (input.includes('retir') || input.includes('loja') || input.includes('buscar')) {
          setOrderState({
            ...orderState,
            deliveryType: 'pickup',
            stage: 'delivery_info'
          });
          
          return "√ìtimo! Em qual loja voc√™ deseja retirar?\n\nüè° Loja 1: Rua Dois, 2130‚ÄëA ‚Äì Residencial 1 ‚Äì C√°gado\nüè° Loja 2: Rua Um, 1614‚ÄëC ‚Äì Residencial 1 ‚Äì C√°gado";
        } else if (input.includes('rua') || input.includes('avenida') || input.includes('av.')) {
          // User is providing address directly
          setOrderState({
            ...orderState,
            deliveryType: 'delivery',
            customerAddress: userInput,
            stage: 'product_selection'
          });
          
          return "Endere√ßo anotado! O que voc√™ gostaria de pedir?";
        } else {
          // Ask again for delivery type
          return "Por favor, me informe se voc√™ quer receber em casa (delivery) ou retirar em uma de nossas lojas.";
        }
        
      case 'product_selection':
        // Handle product selection
        if (input.includes('a√ßa√≠') || input.includes('acai')) {
          return "Voc√™ escolheu A√ßa√≠! Temos v√°rios tamanhos:\n\n‚Ä¢ 300g - R$ 13,99\n‚Ä¢ 350g - R$ 15,99\n‚Ä¢ 400g - R$ 18,99\n‚Ä¢ 500g - R$ 22,99\n‚Ä¢ 600g - R$ 26,99\n‚Ä¢ 700g - R$ 31,99 (2 Cremes + 5 Mix)\n‚Ä¢ 800g - R$ 34,99 (2 Cremes + 5 Mix)\n‚Ä¢ 900g - R$ 38,99 (2 Cremes + 5 Mix)\n‚Ä¢ 1kg - R$ 44,99 (2 Cremes + 5 Mix)\n\nQual tamanho voc√™ prefere?";
        } else if (input.includes('combo')) {
          return "Voc√™ escolheu Combos! Nossas op√ß√µes:\n\n‚Ä¢ Combo Casal (1kg + Milkshake) - R$ 49,99\n‚Ä¢ Combo 1 (400g) - R$ 23,99\n‚Ä¢ Combo 2 (500g) - R$ 26,99\n‚Ä¢ Combo 3 (600g) - R$ 31,99\n‚Ä¢ Combo 4 (900g) - R$ 42,99\n\nQual combo voc√™ prefere?";
        } else if (input.includes('milk') || input.includes('shake')) {
          return "Voc√™ escolheu Milkshake! Temos:\n\n‚Ä¢ 400ml - R$ 11,99\n‚Ä¢ 500ml - R$ 12,99\n\nSabores dispon√≠veis: Morango, Chocolate, Baunilha, Ovomaltine\n\nQual tamanho e sabor voc√™ prefere?";
        } else if (input.includes('vitamina')) {
          return "Voc√™ escolheu Vitamina! Temos:\n\n‚Ä¢ Vitamina de A√ßa√≠ 400ml - R$ 12,00\n‚Ä¢ Vitamina de A√ßa√≠ 500ml - R$ 15,00\n\nOp√ß√µes de complementos: Amendoim, Castanha, Cereja, Farinha L√°ctea, Granola, Leite Condensado, Mel\n\nQual tamanho voc√™ prefere?";
        } else if (input.includes('300') || input.includes('400') || input.includes('500') || input.includes('700')) {
          return generateResponse(input); // Use the new size handler
        } else {
          // Check if this is the first time asking
          return "O que voc√™ gostaria de pedir hoje? Temos A√ßa√≠, Combos, Milkshakes e Vitaminas.";
        }
        
      case 'add_more':
        // Check if user wants to add more products or continue
        if (input.includes('sim') || input.includes('mais') || input.includes('outro')) {
          // Add current product to order and go back to product selection
          if (currentProduct) {
            setOrderState(prev => ({
              ...prev,
              selectedProducts: [...prev.selectedProducts, {
                ...currentProduct,
                quantity: 1
              }],
              total: prev.total + currentProduct.price,
              stage: 'product_selection'
            }));
          }
          
          return "O que mais voc√™ gostaria de adicionar?";
        } else if (input.includes('continuar') || input.includes('prosseguir') || input.includes('avan√ßar')) {
          // Add current product to order and move to complements
          if (currentProduct) {
            setOrderState(prev => ({
              ...prev,
              selectedProducts: [...prev.selectedProducts, {
                ...currentProduct,
                quantity: 1
              }],
              total: prev.total + currentProduct.price,
              stage: 'complements'
            }));
          }
          
          // Show summary of selected products
          const productSummary = orderState.selectedProducts.map((p, i) => 
            `${i+1}. ${p.name} - ${formatPrice(p.price)}`
          ).join('\n');
          
          return `√ìtimo! Voc√™ selecionou:\n\n${productSummary}\n\nAgora vamos aos complementos. Deseja adicionar complementos gr√°tis?\n\n‚Ä¢ 2 cremes (nutella, ninho, morango, etc)\n‚Ä¢ 3 mix (granola, leite em p√≥, pa√ßoca, etc)`;
        } else if (input.includes('a√ßa√≠') || input.includes('acai') || 
                  input.includes('combo') || input.includes('milk') || 
                  input.includes('shake') || input.includes('vitamina')) {
          // User wants to select a different product category
          // Add current product to order first
          if (currentProduct) {
            setOrderState(prev => ({
              ...prev,
              selectedProducts: [...prev.selectedProducts, {
                ...currentProduct,
                quantity: 1
              }],
              total: prev.total + currentProduct.price,
              stage: 'product_selection'
            }));
            setCurrentProduct(null);
          }
          
          // Process the new category selection
          if (input.includes('a√ßa√≠') || input.includes('acai')) {
            return "Voc√™ escolheu A√ßa√≠! Temos v√°rios tamanhos:\n\n‚Ä¢ 300g - R$ 13,99\n‚Ä¢ 350g - R$ 15,99\n‚Ä¢ 400g - R$ 18,99\n‚Ä¢ 500g - R$ 22,99\n‚Ä¢ 600g - R$ 26,99\n‚Ä¢ 700g - R$ 31,99 (2 Cremes + 5 Mix)\n‚Ä¢ 800g - R$ 34,99 (2 Cremes + 5 Mix)\n‚Ä¢ 900g - R$ 38,99 (2 Cremes + 5 Mix)\n‚Ä¢ 1kg - R$ 44,99 (2 Cremes + 5 Mix)\n\nQual tamanho voc√™ prefere?";
          } else if (input.includes('combo')) {
            return "Voc√™ escolheu Combos! Nossas op√ß√µes:\n\n‚Ä¢ Combo Casal (1kg + Milkshake) - R$ 49,99\n‚Ä¢ Combo 1 (400g) - R$ 23,99\n‚Ä¢ Combo 2 (500g) - R$ 26,99\n‚Ä¢ Combo 3 (600g) - R$ 31,99\n‚Ä¢ Combo 4 (900g) - R$ 42,99\n\nQual combo voc√™ prefere?";
          } else if (input.includes('milk') || input.includes('shake')) {
            return "Voc√™ escolheu Milkshake! Temos:\n\n‚Ä¢ 400ml - R$ 11,99\n‚Ä¢ 500ml - R$ 12,99\n\nSabores dispon√≠veis: Morango, Chocolate, Baunilha, Ovomaltine\n\nQual tamanho e sabor voc√™ prefere?";
          } else if (input.includes('vitamina')) {
            return "Voc√™ escolheu Vitamina! Temos:\n\n‚Ä¢ Vitamina de A√ßa√≠ 400ml - R$ 12,00\n‚Ä¢ Vitamina de A√ßa√≠ 500ml - R$ 15,00\n\nOp√ß√µes de complementos: Amendoim, Castanha, Cereja, Farinha L√°ctea, Granola, Leite Condensado, Mel\n\nQual tamanho voc√™ prefere?";
          } else {
            return "O que mais voc√™ gostaria de adicionar?";
          }
        } else {
          return "Por favor, digite 'sim' para adicionar mais produtos ou 'continuar' para prosseguir com os complementos.";
        }
        
      case 'complements':
        // Process complements selection
        if (input.includes('creme')) {
          // Get the selected a√ßa√≠ size
          const selectedSize = orderState.selectedProducts.find(p => p.name.includes('A√ßa√≠'))?.size || '';
          
          return "Voc√™ escolheu adicionar cremes! Quais cremes voc√™ gostaria? (M√°ximo de 2)\n\n‚Ä¢ Creme de Cupua√ßu\n‚Ä¢ Creme de Morango\n‚Ä¢ Creme de Ninho\n‚Ä¢ Creme de Nutela\n‚Ä¢ Creme de Maracuj√°\n‚Ä¢ Creme de Pa√ßoca\n‚Ä¢ Creme de Ovomaltine\n‚Ä¢ Creme de Coco\n‚Ä¢ Creme Morangotela\n‚Ä¢ Creme de Pistache\n\nDigite os nomes dos cremes que deseja ou 'continuar' para prosseguir.";
        } else if (input.includes('mix')) {
          const size = orderState.selectedProducts.find(p => p.name.includes('A√ßa√≠'))?.size || '';
          let maxMix = 3; // Default for most sizes
          
          // Adjust max mix based on size
          if (size.includes('700g') || size.includes('800g') || size.includes('900g') || size.includes('1kg') || size.includes('1 kg')) {
            maxMix = 5;
          } else if (size.includes('300g') && size.includes('1 Creme')) {
            maxMix = 2;
          }
          
          return `Voc√™ escolheu adicionar mix! Quais mix voc√™ gostaria? (M√°ximo de ${maxMix})\n\n‚Ä¢ Castanha em Banda\n‚Ä¢ Cereja\n‚Ä¢ Chocoball\n‚Ä¢ Granola\n‚Ä¢ Granulado de Chocolate\n‚Ä¢ Leite Condensado\n‚Ä¢ Morango\n‚Ä¢ Pa√ßoca\n‚Ä¢ Leite em P√≥\n‚Ä¢ Uva\n‚Ä¢ Kiwi\n‚Ä¢ Jujuba\n‚Ä¢ Marshmallows\n‚Ä¢ M&Ms\n‚Ä¢ Sucrilhos\n‚Ä¢ Flocos de Tapioca\n‚Ä¢ Canudos\n‚Ä¢ Ovomaltine\n\nDigite os nomes dos mix que deseja ou 'continuar' para prosseguir.`;
        } else if (input.includes('sem') || input.includes('continuar') || input.includes('prosseguir')) {
          setOrderState({
            ...orderState,
            stage: 'payment'
          });
          
          return `Pedido anotado! O total √© ${formatPrice(orderState.total)}.\n\nQual a forma de pagamento?\n‚Ä¢ Dinheiro\n‚Ä¢ PIX\n‚Ä¢ Cart√£o`;
        } else if (input.includes('nutela') || input.includes('ninho') || input.includes('morango') || 
                  input.includes('cupua√ßu') || input.includes('maracuj√°') || input.includes('pa√ßoca') || 
                  input.includes('ovomaltine') || input.includes('coco') || input.includes('morangotela') || 
                  input.includes('pistache')) {
          // User is selecting cremes
          const selectedSize = orderState.selectedProducts.find(p => p.name.includes('A√ßa√≠'))?.size || '';
          const maxCremes = 2;
          
          // Extract cremes from input
          const cremeKeywords = ['nutela', 'ninho', 'morango', 'cupua√ßu', 'maracuj√°', 'pa√ßoca', 'ovomaltine', 'coco', 'morangotela', 'pistache'];
          const selectedCremes = cremeKeywords.filter(creme => input.includes(creme));
          
          // Check if exceeding limit
          if (selectedCremes.length > maxCremes) {
            return `‚ö†Ô∏è Voc√™ selecionou ${selectedCremes.length} cremes, mas o limite para este tamanho √© ${maxCremes}. Por favor, selecione no m√°ximo ${maxCremes} cremes.`;
          }
          
          return `Voc√™ selecionou ${selectedCremes.length} cremes: ${selectedCremes.join(', ')}. Deseja adicionar mix tamb√©m? Digite 'mix' para adicionar ou 'continuar' para prosseguir.`;
        } else if (input.includes('castanha') || input.includes('cereja') || input.includes('chocoball') || 
                  input.includes('granola') || input.includes('granulado') || input.includes('leite condensado') || 
                  input.includes('morango') || input.includes('pa√ßoca') || input.includes('leite em p√≥') || 
                  input.includes('uva') || input.includes('kiwi') || input.includes('jujuba') || 
                  input.includes('marshmallow') || input.includes('m&m') || input.includes('sucrilho') || 
                  input.includes('tapioca') || input.includes('canudo') || input.includes('ovomaltine')) {
          // User is selecting mix
          const selectedSize = orderState.selectedProducts.find(p => p.name.includes('A√ßa√≠'))?.size || '';
          let maxMix = 3;
          
          if (selectedSize.includes('700g') || selectedSize.includes('800g') || selectedSize.includes('900g') || 
              selectedSize.includes('1kg') || selectedSize.includes('1 kg')) {
            maxMix = 5;
          }
          
          // Extract mix from input
          const mixKeywords = ['castanha', 'cereja', 'chocoball', 'granola', 'granulado', 'leite condensado', 
                              'morango', 'pa√ßoca', 'leite em p√≥', 'uva', 'kiwi', 'jujuba', 'marshmallow', 
                              'm&m', 'sucrilho', 'tapioca', 'canudo', 'ovomaltine'];
          const selectedMix = mixKeywords.filter(mix => input.includes(mix));
          
          // Check if exceeding limit
          if (selectedMix.length > maxMix) {
            return `‚ö†Ô∏è Voc√™ selecionou ${selectedMix.length} mix, mas o limite para este tamanho √© ${maxMix}. Por favor, selecione no m√°ximo ${maxMix} mix.`;
          }
          
          return `Voc√™ selecionou ${selectedMix.length} mix: ${selectedMix.join(', ')}. Digite 'continuar' para prosseguir.`;
        } else {
          const size = orderState.selectedProducts.find(p => p.name.includes('A√ßa√≠'))?.size || '';
          let maxCremes = 2;
          let maxMix = 3;
          
          // Adjust max complements based on size from delivery system
          if (size.includes('700g') || size.includes('800g') || size.includes('900g') || size.includes('1kg') || size.includes('1 kg')) {
            maxMix = 5;
          }
          
          return `Deseja adicionar complementos gr√°tis?\n\n‚Ä¢ Cremes (M√°ximo de ${maxCremes}): Nutella, Ninho, Morango, etc\n‚Ä¢ Mix (M√°ximo de ${maxMix}): Granola, Leite em p√≥, Pa√ßoca, etc\n\nOu digite 'continuar' para prosseguir sem complementos.`;
        }
        
      case 'payment':
        // Process payment method
        let paymentMethod: 'money' | 'pix' | 'card' = 'money';
        
        if (input.includes('pix')) {
          paymentMethod = 'pix';
        } else if (input.includes('cart√£o') || input.includes('cartao') || input.includes('card')) {
          paymentMethod = 'card';
        }
        
        setOrderState({
          ...orderState,
          paymentMethod,
          stage: 'confirmation'
        });
        
        let paymentDetails = '';
        if (paymentMethod === 'pix') {
          paymentDetails = "\n\nüì± **DADOS PIX:**\nChave: 85989041010\nNome: Grupo Elite";
        } else if (paymentMethod === 'money') {
          paymentDetails = "\n\nPrecisa de troco? Me informe para quanto.";
        }
        
        return `Voc√™ escolheu pagar com ${paymentMethod === 'money' ? 'dinheiro' : paymentMethod === 'pix' ? 'PIX' : 'cart√£o'}.${paymentDetails}\n\nConfirma o pedido?`;
        
      case 'confirmation':
        // Confirm order
        if (input.includes('sim') || input.includes('confirmo') || input.includes('ok')) {
          // Store the selected complements in the order
          const selectedCremes = [];
          const selectedMix = [];
          
          // Extract complements from the conversation
          for (let i = 0; i < messages.length; i++) {
            const message = messages[i].text.toLowerCase();
            
            if (message.includes('voc√™ selecionou') && message.includes('cremes:')) {
              const match = message.match(/voc√™ selecionou \d+ cremes: (.*?)\./i);
              if (match && match[1]) {
                selectedCremes.push(...match[1].split(', '));
              }
            }
            
            if (message.includes('voc√™ selecionou') && message.includes('mix:')) {
              const match = message.match(/voc√™ selecionou \d+ mix: (.*?)\./i);
              if (match && match[1]) {
                selectedMix.push(...match[1].split(', '));
              }
            }
          }
          
          setOrderState({
            stage: 'complete',
            ...orderState,
            selectedComplements: [...selectedCremes, ...selectedMix]
          });
          
          // Create the actual order in the system
          return createRealOrder();
        } else if (input.includes('n√£o') || input.includes('nao') || input.includes('cancelar')) {
          setOrderState({
            stage: 'initial',
            selectedProducts: [],
            total: 0
          });
          
          return "Pedido cancelado. Se quiser fazer um novo pedido ou tiver outras d√∫vidas, estou √† disposi√ß√£o! üòä";
        } else {
          return "Por favor, confirme se deseja finalizar o pedido digitando 'sim' ou 'n√£o'.";
        }
        
      default:
        return "Desculpe, n√£o entendi. Vamos recome√ßar o pedido? Por favor, me diga se voc√™ quer delivery ou retirada na loja.";
    }
  };
  
  // Helper function to format price
  const formatPrice = (price: number): string => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(price);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
      
      // If the message looks like a phone number, store it for future use
      if (/^\d{10,11}$/.test(input.trim())) {
        setCustomerPhone(input.trim());
        localStorage.setItem('customer_phone', input.trim());
      }
    }
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    setIsMinimized(false);
    
    // Reset order state when opening/closing chat
    setOrderState({
      stage: 'initial',
      selectedProducts: [],
      total: 0,
      selectedComplements: []
    });
    setCurrentProduct(null);
  };

  const handleSendMessage = () => {
    if (input.trim()) {
      const currentInput = input; // Store current input before clearing
      
      // If input looks like customer info in delivery_info stage, extract it
      if (orderState.stage === 'delivery_info' && 
          (currentInput.includes('Endere√ßo:') || 
           currentInput.includes('Nome:') || 
           currentInput.includes('Telefone:'))) {
        
        // Extract customer info
        const addressMatch = currentInput.match(/Endere√ßo:?\s*([^\n]+)/i);
        const nameMatch = currentInput.match(/Nome:?\s*([^\n]+)/i);
        const phoneMatch = currentInput.match(/Telefone:?\s*([^\n]+)/i);
        
        if (addressMatch || nameMatch || phoneMatch) {
          setOrderState(prev => ({
            ...prev,
            customerAddress: addressMatch ? addressMatch[1] : prev.customerAddress,
            customerName: nameMatch ? nameMatch[1] : prev.customerName,
            customerPhone: phoneMatch ? phoneMatch[1] : prev.customerPhone,
            stage: 'product_selection'
          }));
        }
      }
      
      const userMessage: Message = {
        id: Date.now().toString(),
        text: currentInput,
        sender: 'user',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, userMessage]);
      setInput('');
      setIsTyping(true);

      setTimeout(() => {
        let response = generateResponse(currentInput);
        
        // If response is a Promise (from createRealOrder), resolve it
        if (response instanceof Promise) {
          response.then(resolvedResponse => {
            const botMessage: Message = {
              id: (Date.now() + 1).toString(),
              text: resolvedResponse,
              sender: 'bot',
              timestamp: new Date()
            };
            
            setMessages(prev => [...prev, botMessage]);
            setIsTyping(false);
          });
          return;
        }
        
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: response,
          sender: 'bot',
          timestamp: new Date()
        };

        setMessages(prev => [...prev, botMessage]);
        setIsTyping(false);
      }, 1000);
    }
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen && (
        <button
          onClick={toggleChat}
          className="bg-purple-600 hover:bg-purple-700 text-white rounded-full p-4 shadow-lg transition-all duration-300 hover:scale-110"
        >
          <MessageCircle size={24} />
        </button>
      )}

      {isOpen && (
        <div className={`bg-white rounded-lg shadow-xl w-96 h-[500px] flex flex-col ${isMinimized ? 'h-12' : ''}`}>
          <div className="bg-purple-600 text-white p-4 rounded-t-lg flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <Bot size={20} />
              <span className="font-semibold">A√ßa√≠ Bot</span>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => setIsMinimized(!isMinimized)}
                className="hover:bg-purple-700 p-1 rounded"
              >
                <Minus size={16} />
              </button>
              <button
                onClick={toggleChat}
                className="hover:bg-purple-700 p-1 rounded"
              >
                <X size={16} />
              </button>
            </div>
          </div>

          {!isMinimized && (
            <>
              <div className="flex-1 overflow-y-auto p-4 space-y-3 max-h-[350px]">
                {messages.length === 0 && (
                  <div className="flex items-start space-x-2">
                    <Bot size={20} className="text-purple-600 mt-1 flex-shrink-0" />
                    <div className="bg-gray-100 rounded-lg p-3 max-w-xs whitespace-pre-line">
                      <p className="text-sm whitespace-pre-line">{getInitialGreeting()}</p>
                      
                      <div className="mt-3 space-y-2">
                        <button 
                          onClick={() => {
                            setInput("Fazer um pedido");
                            handleSendMessage();
                          }}
                          className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                        >
                          üõí Fazer um pedido
                        </button>
                        
                        <button 
                          onClick={() => {
                            setInput("Ver promo√ß√µes");
                            handleSendMessage();
                          }}
                          className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                        >
                          üî• Ver promo√ß√µes
                        </button>
                        
                        <button 
                          onClick={() => {
                            setInput("Hor√°rios e localiza√ß√£o");
                            handleSendMessage();
                          }}
                          className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                        >
                          üìç Hor√°rios e localiza√ß√£o
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex items-start space-x-2 ${
                      message.sender === 'user' ? 'justify-end' : ''
                    }`}
                  >
                    {message.sender === 'bot' && (
                      <Bot size={20} className="text-purple-600 mt-1" />
                    )}
                    <div 
                      className={`rounded-lg p-3 max-w-xs whitespace-pre-line ${
                        message.sender === 'user'
                          ? 'bg-purple-600 text-white'
                          : 'bg-gray-100'
                      }`}
                    >
                      <div className="text-sm whitespace-pre-line">{message.text}</div>
                      
                      {/* Quick reply buttons for bot messages */}
                      {message.sender === 'bot' && message.text.includes("Voc√™ deseja delivery ou retirada") && (
                        <div className="mt-3 space-y-2">
                          <button 
                            onClick={() => {
                              setInput("Delivery");
                              handleSendMessage();
                            }}
                            className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                          >
                            üöö Delivery
                          </button>
                          
                          <button 
                            onClick={() => {
                              setInput("Retirar na loja");
                              handleSendMessage();
                            }}
                            className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                          >
                            üè™ Retirar na loja
                          </button>
                        </div>
                      )}
                    </div>
                    {message.sender === 'user' && (
                      <User size={20} className="text-gray-600 mt-1" />
                    )}
                  </div>
                ))}

                {isTyping && (
                  <div className="flex items-start space-x-2">
                    <Bot size={20} className="text-purple-600 mt-1" />
                    <div className="bg-gray-100 rounded-lg p-3">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              {showPromotions && (
                <div className="p-4 border-t">
                  <PromotionsAIResponse onClose={() => setShowPromotions(false)} />
                </div>
              )}

              <div className="p-4 border-t">
                <div className="flex space-x-2">
                  <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Digite sua mensagem..."
                    className="flex-1 border rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-600 shadow-sm"
                  />
                  <button
                    onClick={handleSendMessage}
                    className="bg-purple-600 hover:bg-purple-700 text-white rounded-lg px-3 py-2 transition-colors shadow-sm"
                  >
                    <Send size={16} />
                  </button>
                </div>
                
                {/* Product category quick replies - show when in product selection stage */}
                {orderState.stage === 'product_selection' && !isTyping && (
                  <div className="mt-3 space-y-2">
                    <button 
                      onClick={() => {
                        setInput("A√ßa√≠");
                        handleSendMessage();
                      }}
                      className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß A√ßa√≠
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Combo");
                        handleSendMessage();
                      }}
                      className="w-full text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üç® Combos
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Milkshake");
                        handleSendMessage();
                      }}
                      className="w-full text-left px-3 py-2 bg-pink-100 hover:bg-pink-200 text-pink-700 rounded-lg text-sm transition-colors"
                    >
                      ü•§ Milkshakes
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Vitamina");
                        handleSendMessage();
                      }}
                      className="w-full text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg text-sm transition-colors"
                    >
                      üçì Vitaminas
                    </button>
                  </div>
                )}
                
                {/* Size selection quick replies for A√ßa√≠ - show when last bot message contains size options */}
                {messages.length > 0 && 
                 messages[messages.length - 1]?.sender === 'bot' && 
                 (messages[messages.length - 1]?.text.includes("Qual tamanho voc√™ prefere") || 
                  messages[messages.length - 1]?.text.includes("Temos v√°rios tamanhos") || 
                  messages[messages.length - 1]?.text.includes("Qual combo voc√™ prefere")) && 
                 messages[messages.length - 1]?.text.includes("A√ßa√≠") && 
                 !isTyping && (
                  <div className="mt-3 grid grid-cols-2 gap-2 max-h-48 overflow-y-auto">
                    <button 
                      onClick={() => {
                        setInput("300g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 300g - R$ 13,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("350g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 350g - R$ 15,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("400g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 400g - R$ 18,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("500g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 500g - R$ 22,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("600g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 600g - R$ 26,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("700g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 700g - R$ 31,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("800g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 800g - R$ 34,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("900g");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 900g - R$ 38,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("1kg");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üçß 1kg - R$ 44,99
                    </button>
                  </div>
                )}
                
                {/* Combo selection quick replies */}
                {messages.length > 0 && 
                 messages[messages.length - 1]?.sender === 'bot' && 
                 messages[messages.length - 1]?.text.includes("Qual combo voc√™ prefere") && 
                 !isTyping && (
                  <div className="mt-3 grid grid-cols-1 gap-2 max-h-48 overflow-y-auto">
                    <button 
                      onClick={() => {
                        setInput("Combo Casal");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üç® Combo Casal (1kg + Milkshake) - R$ 49,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Combo 1");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üç® Combo 1 (400g) - R$ 23,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Combo 2");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üç® Combo 2 (500g) - R$ 26,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Combo 3");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üç® Combo 3 (600g) - R$ 31,99
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Combo 4");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üç® Combo 4 (900g) - R$ 42,99
                    </button>
                  </div>
                )}
                
                {/* Milkshake selection quick replies */}
                {messages.length > 0 && 
                 messages[messages.length - 1]?.sender === 'bot' && 
                 messages[messages.length - 1]?.text.includes("Voc√™ escolheu Milkshake") && 
                 !isTyping && (
                  <div className="mt-3 grid grid-cols-2 gap-2 max-h-48 overflow-y-auto">
                    <button 
                      onClick={() => {
                        setInput("Milkshake 400ml Morango");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-pink-100 hover:bg-pink-200 text-pink-700 rounded-lg text-sm transition-colors"
                    >
                      üçì 400ml Morango
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Milkshake 400ml Chocolate");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-pink-100 hover:bg-pink-200 text-pink-700 rounded-lg text-sm transition-colors"
                    >
                      üç´ 400ml Chocolate
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Milkshake 500ml Morango");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-pink-100 hover:bg-pink-200 text-pink-700 rounded-lg text-sm transition-colors"
                    >
                      üçì 500ml Morango
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Milkshake 500ml Chocolate");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-pink-100 hover:bg-pink-200 text-pink-700 rounded-lg text-sm transition-colors"
                    >
                      üç´ 500ml Chocolate
                    </button>
                  </div>
                )}
                
                {/* Vitamina selection quick replies */}
                {messages.length > 0 && 
                 messages[messages.length - 1]?.sender === 'bot' && 
                 messages[messages.length - 1]?.text.includes("Voc√™ escolheu Vitamina") && 
                 !isTyping && (
                  <div className="mt-3 grid grid-cols-2 gap-2 max-h-48 overflow-y-auto">
                    <button 
                      onClick={() => {
                        setInput("Vitamina 400ml");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg text-sm transition-colors"
                    >
                      ü•§ Vitamina 400ml - R$ 12,00
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Vitamina 500ml");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg text-sm transition-colors"
                    >
                      ü•§ Vitamina 500ml - R$ 15,00
                    </button>
                  </div>
                )}
                
                {/* Add more or continue buttons - show when in add_more stage */}
                {orderState.stage === 'add_more' && !isTyping && (
                  <div className="mt-3 space-y-2">
                    <button 
                      onClick={() => {
                        setInput("Sim, quero adicionar mais");
                        handleSendMessage();
                      }}
                      className="w-full text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      ‚ûï Adicionar mais produtos
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Continuar");
                        handleSendMessage();
                      }}
                      className="w-full text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg text-sm transition-colors"
                    >
                      ‚úÖ Continuar para complementos
                    </button>
                  </div>
                )}
                
                {/* Complement options - show when in complements stage */}
                {orderState.stage === 'complements' && !isTyping && (
                  <div className="mt-3 grid grid-cols-1 gap-2">
                    <button 
                      onClick={() => {
                        setInput("Quero adicionar cremes");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üç¶ Cremes (M√°x. 2)
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Quero adicionar mix");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      ü•ú Mix (M√°x. 3-5)
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Sem complementos");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg text-sm transition-colors"
                    >
                      ‚è≠Ô∏è Sem complementos
                    </button>
                  </div>
                )}
                
                {/* Payment method options - show when in payment stage */}
                {orderState.stage === 'payment' && !isTyping && (
                  <div className="mt-3 grid grid-cols-1 gap-2">
                    <button 
                      onClick={() => {
                        setInput("Dinheiro");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg text-sm transition-colors"
                    >
                      üíµ Dinheiro
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("PIX");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm transition-colors"
                    >
                      üì± PIX
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("Cart√£o");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg text-sm transition-colors"
                    >
                      üí≥ Cart√£o
                    </button>
                  </div>
                )}
                
                {/* Confirmation options - show when in confirmation stage */}
                {orderState.stage === 'confirmation' && !isTyping && (
                  <div className="mt-3 grid grid-cols-2 gap-2">
                    <button 
                      onClick={() => {
                        setInput("Sim, confirmo o pedido");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg text-sm transition-colors"
                    >
                      ‚úÖ Confirmar pedido
                    </button>
                    
                    <button 
                      onClick={() => {
                        setInput("N√£o, quero cancelar");
                        handleSendMessage();
                      }}
                      className="text-left px-3 py-2 bg-red-100 hover:bg-red-200 text-red-700 rounded-lg text-sm transition-colors"
                    >
                      ‚ùå Cancelar
                    </button>
                  </div>
                )}
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default AcaiChatbot;